#include <stdio.h>

#define TAM 10
#define TAM_HABILIDADE 5
#define NAVIO 3
#define AGUA 0
#define HABILIDADE 5

// Inicializa o tabuleiro com água
void inicializarTabuleiro(int tabuleiro[TAM][TAM]) {
    for (int i = 0; i < TAM; i++)
        for (int j = 0; j < TAM; j++)
            tabuleiro[i][j] = AGUA;
}

// Exibe o tabuleiro com símbolos distintos
void exibirTabuleiro(int tabuleiro[TAM][TAM]) {
    printf("\nTABULEIRO:\n\n   ");
    for (int j = 0; j < TAM; j++)
        printf("%d ", j);
    printf("\n");

    for (int i = 0; i < TAM; i++) {
        printf("%d |", i);
        for (int j = 0; j < TAM; j++) {
            int valor = tabuleiro[i][j];
            if (valor == AGUA) printf(" ~");
            else if (valor == NAVIO) printf(" N");
            else if (valor == HABILIDADE) printf(" *");
            else printf(" ?");
        }
        printf("\n");
    }
    printf("\n");
}

// Posiciona navio horizontalmente
int posicionarNavioHorizontal(int tabuleiro[TAM][TAM], int linha, int coluna) {
    if (coluna + 3 > TAM) return 0;
    for (int i = 0; i < 3; i++)
        if (tabuleiro[linha][coluna + i] != AGUA) return 0;

    for (int i = 0; i < 3; i++)
        tabuleiro[linha][coluna + i] = NAVIO;

    return 1;
}

// Posiciona navio verticalmente
int posicionarNavioVertical(int tabuleiro[TAM][TAM], int linha, int coluna) {
    if (linha + 3 > TAM) return 0;
    for (int i = 0; i < 3; i++)
        if (tabuleiro[linha + i][coluna] != AGUA) return 0;

    for (int i = 0; i < 3; i++)
        tabuleiro[linha + i][coluna] = NAVIO;

    return 1;
}

// Diagonal ↘
int posicionarNavioDiagonalPrincipal(int tabuleiro[TAM][TAM], int linha, int coluna) {
    if (linha + 3 > TAM || coluna + 3 > TAM) return 0;
    for (int i = 0; i < 3; i++)
        if (tabuleiro[linha + i][coluna + i] != AGUA) return 0;

    for (int i = 0; i < 3; i++)
        tabuleiro[linha + i][coluna + i] = NAVIO;

    return 1;
}

// Diagonal ↙
int posicionarNavioDiagonalSecundaria(int tabuleiro[TAM][TAM], int linha, int coluna) {
    if (linha + 3 > TAM || coluna - 2 < 0) return 0;
    for (int i = 0; i < 3; i++)
        if (tabuleiro[linha + i][coluna - i] != AGUA) return 0;

    for (int i = 0; i < 3; i++)
        tabuleiro[linha + i][coluna - i] = NAVIO;

    return 1;
}

// Cria matriz Cone: expande do topo para a base
void criarCone(int cone[TAM_HABILIDADE][TAM_HABILIDADE]) {
    for (int i = 0; i < TAM_HABILIDADE; i++) {
        for (int j = 0; j < TAM_HABILIDADE; j++) {
            if (j >= TAM_HABILIDADE / 2 - i && j <= TAM_HABILIDADE / 2 + i)
                cone[i][j] = 1;
            else
                cone[i][j] = 0;
        }
    }
}

// Cria matriz Cruz
void criarCruz(int cruz[TAM_HABILIDADE][TAM_HABILIDADE]) {
    for (int i = 0; i < TAM_HABILIDADE; i++) {
        for (int j = 0; j < TAM_HABILIDADE; j++) {
            if (i == TAM_HABILIDADE / 2 || j == TAM_HABILIDADE / 2)
                cruz[i][j] = 1;
            else
                cruz[i][j] = 0;
        }
    }
}

// Cria matriz Octaedro (losango)
void criarOctaedro(int octaedro[TAM_HABILIDADE][TAM_HABILIDADE]) {
    for (int i = 0; i < TAM_HABILIDADE; i++) {
        for (int j = 0; j < TAM_HABILIDADE; j++) {
            if (abs(i - TAM_HABILIDADE / 2) + abs(j - TAM_HABILIDADE / 2) <= TAM_HABILIDADE / 2)
                octaedro[i][j] = 1;
            else
                octaedro[i][j] = 0;
        }
    }
}

// Sobrepõe uma matriz de habilidade ao tabuleiro
void aplicarHabilidade(int tabuleiro[TAM][TAM], int habilidade[TAM_HABILIDADE][TAM_HABILIDADE], int linha, int coluna) {
    int meio = TAM_HABILIDADE / 2;

    for (int i = 0; i < TAM_HABILIDADE; i++) {
        for (int j = 0; j < TAM_HABILIDADE; j++) {
            int linTab = linha - meio + i;
            int colTab = coluna - meio + j;

            if (linTab >= 0 && linTab < TAM && colTab >= 0 && colTab < TAM) {
                if (habilidade[i][j] == 1 && tabuleiro[linTab][colTab] == AGUA)
                    tabuleiro[linTab][colTab] = HABILIDADE;
            }
        }
    }
}

int main() {
    int tabuleiro[TAM][TAM];
    int cone[TAM_HABILIDADE][TAM_HABILIDADE];
    int cruz[TAM_HABILIDADE][TAM_HABILIDADE];
    int octaedro[TAM_HABILIDADE][TAM_HABILIDADE];

    inicializarTabuleiro(tabuleiro);

    // Posiciona navios
    posicionarNavioHorizontal(tabuleiro, 1, 1);
    posicionarNavioVertical(tabuleiro, 4, 6);
    posicionarNavioDiagonalPrincipal(tabuleiro, 0, 7);
    posicionarNavioDiagonalSecundaria(tabuleiro, 6, 9);

    // Cria habilidades
    criarCone(cone);
    criarCruz(cruz);
    criarOctaedro(octaedro);

    // Aplica habilidades no tabuleiro
    aplicarHabilidade(tabuleiro, cone, 2, 2);
    aplicarHabilidade(tabuleiro, cruz, 5, 5);
    aplicarHabilidade(tabuleiro, octaedro, 7, 2);

    // Exibe o tabuleiro final
    exibirTabuleiro(tabuleiro);

    return 0;
}